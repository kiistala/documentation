////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

////
;***************************************************************************
; Subversion:
; $Revision$ 
; $Author$
; $Date$
;***************************************************************************
////


:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.0.6
:doctype:		book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


[[opsi-winst-rc]]
= opsi-winst / opsi-script reference card (4.11.6)

// Include common opsi copyright
ifndef::manual[]
include::../common/opsi_manual_copyright.asciidoc[]
endif::manual[]
////
include::../common/opsi_manual_copyright.asciidoc[]
////

////
// Include reference card
include::../opsi-winst-reference-card/opsi-script-reference.asciidoc[]
////


[[opsi-winst-rc-const]]
== Global text constants

[[opsi-winst-rc-const-system1]]
=== System directories

[[opsi-winst-rc-const-system2]]
==== System directories [W]:

`%ProgramFilesDir%`:	'c:\program files'

`%ProgramFiles32Dir%`:	'c:\Program Files (x86)'	            //since 4.10.8

`%ProgramFiles64Dir%`:	'c:\program files'	                  //since 4.10.8

`%ProgramFilesSysnativeDir%` :	'c:\program files'	          //since 4.10.8

`%Systemroot%` :  	'c:\windows'

`%System%` :  	 	'c:\windows\system32'

`%Systemdrive%` :       	'c:'

`%ProfileDir%` :	        +
NT5: 'c:\Documents and Settings' +
NT6: 'C:\users\'

ifdef::manual[see also: <<opsi-winst-global-const-list-system-base>>]

[[opsi-winst-rc-const-common]]
=== Common (AllUsers) directories [W]:

`%AllUsersProfileDir%` or `%CommonProfileDir%` : +
NT5: 'c:\Documents and Settings\All Users' +
NT6: 'C:\Users\Public'

`%CommonStartMenuPath%` or `%CommonStartmenuDir%` : +
NT5: 'c:\Documents and Settings\All Users\Startmenu' +
NT6: 'C:\ProgramData\Microsoft\Windows\Start Menu'

`%CommonAppdataDir%` : +
NT5: 'c:\Documents and Settings\All Users\Application Data' +
NT6: 'C:\ProgramData'

`%CommonDesktopDir%` +
NT5: 'c:\Documents and Settings\All Users\Desktop' +
NT6: 'C:\Users\Public\Desktop'

`%CommonStartupDir%` +
NT5: 'c:\Documents and Settings\All Users\Autostart' +
NT6: 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp'

`%CommonProgramsDir%`

ifdef::manual[see also : <<opsi-winst-global-const-list-commondir>>]

[[opsi-winst-rc-const-default]]
=== Default User directories [W]:

`%DefaultUserProfileDir%`                          //since 4.11.1.1

ifdef::manual[see also : <<opsi-winst-global-const-list-defaultdir>>]

[[opsi-winst-rc-const-current]]
=== Current user directories  [W]:
User is the logged in user or given by /usercontext.

`%AppdataDir%` or `%CurrentAppdataDir%` : //since 4.10.8.13 +
NT5: 'c:\Documents and Settings\%USERNAME%\Application Data'
NT6: 'c:\users\%USERNAME%\Appdata\Roaming'

`%CurrentStartmenuDir%` //since 4.10.8.13 

`%CurrentDesktopDir%` //since 4.10.8.13

`%CurrentStartupDir%`                               //since 4.10.8.13

`%CurrentProgramsDir%`                              //since 4.10.8.13

`%CurrentSendToDir%`	                              //since 4.10.8.13

`%CurrentProfileDir%`                               //since 4.11.2.1

ifdef::manual[see also : <<opsi-winst-global-const-list-currentuser>>]

[[opsi-winst-rc-const-allntuser]]
=== /AllNtUserProfiles directory constants [W]:

`%UserProfileDir%`  +
or +
`%CurrentProfileDir%`                               // since 4.11.2.1 +
NT5: 'c:\Documents and Settings\%USERNAME%' +
NT6: 'c:\users\%USERNAME%'

ifdef::manual[see also : <<opsi-winst-global-const-list-allntuser>>]

[[opsi-winst-rc-const-winstpath]]
=== opsi-winst Path and Directories [W/L]:

`%ScriptPath% or %ScriptDir%`

`%ScriptDrive%`

`%WinstDir%`

`%WinstVersion%`                                     //4.10.8.3

`%Logfile%`

`%opsiScriptHelperPath%`  `%ProgramFiles32Dir%\opsi.org\opsiScriptHelper\lib` // since 4.11.3.2

`%opsiTmpDir%` : `c:\opsi.org\tmp` // since 4.11.4.3

`%opsiLogDir%` : `c:\opsi.org\log` // since 4.11.4.3

ifdef::manual[see also : <<opsi-winst-global-const-list-winst>>]

[[opsi-winst-rc-const-network]]
=== Network informations [W/L]:

`%Host%` :	value of environment variable HOST.

`%PCName%`:	value of environment variable PCNAME, or if absent of COMPUTERNAME.

`%Username%` :	Name of actual user.

`%IPName%` : The dns name of the pc. Usually identical with the netbios name and therefore with `%PCName%` besides that the netbios names uses to be uppercase. 

`%IPAddress%` : may be the IP-Address of the machine. Use funktion `GetMyIpByTarget()` instead. +
ifdef::manual[see also : <<GetMyIpByTarget>>]

ifdef::manual[see also : <<opsi-winst-global-const-list-network>>]

[[opsi-winst-rc-const-service]]
=== Service Data [W/L]

`%HostID%` :	FQDN of the client

`%opsiserviceURL%`

`%opsiServer%`

`%opsiDepotId%`     //since 4.11.4

`%opsiserviceUser%` FQDN used for the connection to the opsi-config-server

`%opsiservicePassword%`

`%installingProdName%`: 	productid	 //since 4.10.8

`%installingProdVersion%`:	product version	 //since 4.10.8

`%installingProduct%` :	productid (deprecated)

ifdef::manual[see also : <<opsi-winst-global-const-list-service>>]

[[opsi-winst-rc-primary-sections]]
== In Primary Sections

[[opsi-winst-rc-primary-sections-kind]]
=== Kinds of Primary Sections [W/L]:

`[Initial]`

`[Actions]`

`[sub`<identifier>`]`

`sub` <file name>

`[ProfileActions]` [W]

ifdef::manual[see also : <<opsi-winst-prim-section>>]


[[opsi-winst-rc-winst-control]]
=== Winst control [W/L]:

`encoding=`<encoding> // (default is system encoding) since 4.11.4.2
ifdef::manual[see also : <<encoding>>]

`LogLevel`  (deprecated)
ifdef::manual[see also : <<opsi-winst-params-loglevel>>]

`SetLogLevel` = <number> or `SetLogLevel` = <string> // (default=6)
ifdef::manual[see also : <<SetLogLevel>>]
[source,winst]
----
SetLogLevel = 7
SetLogLevel = "7"
----

`ExitOnError` = <boolean value> // (default=false)
ifdef::manual[see also : <<ExitOnError>>]

`ScriptErrorMessages =` <boolean value> // (default=true)
ifdef::manual[see also : <<ScriptErrorMessages>>]

`FatalOnSyntaxError =` <boolean value>  // (default=true) since 4.11.3.2
ifdef::manual[see also : <<FatalOnSyntaxError>>]

`FatalOnRuntimeError =` <boolean value>  // (default=false) since 4.11.3.2
ifdef::manual[see also : <<FatalOnRuntimeError>>]

`AutoActivityDisplay =` <boolean value>  // (default=false); if true shows a marquee (endless) progressbar while winbatch/dosbatch sections are running. //since 4.11.4.7
ifdef::manual[see also : <<AutoActivityDisplay>>]

`Message` <string> or `Message` = <const string>
ifdef::manual[see also : <<Message>>]

`ShowMessageFile` <string>
ifdef::manual[see also : <<ShowMessageFile>>]

`ShowBitMap`  [<file name>] [<sub title>]
ifdef::manual[see also : <<ShowBitMap>>]

`comment` <string> or `comment` = <const string>
ifdef::manual[see also : <<comment>>]

`LogError` <string> or `LogError` = <const string>
ifdef::manual[see also : <<LogError>>]

`LogWarning` <string> or `LogWarning` = <const string>
ifdef::manual[see also : <<LogWarning>>]

`includelog` <file name> <tail size>   //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<includelog>>]

`includelog` <file name> <tail size> [<encoding>]  //since 4.11.4.1 [W/L]
ifdef::manual[see also : <<includelog>>]

[source,winst]
----
includelog "%Scriptpath%\test-files\10lines.txt" "5"
----

`SetConfidential` <secret string> //since 4.11.3.5 [W/L]
ifdef::manual[see also : <<SetConfidential>>]

`Pause` <string> or `Pause` = <const string>
ifdef::manual[see also : <<Pause>>]

`Stop` <string> or `stop` = <const string>
ifdef::manual[see also : <<Stop>>]

`include_insert` <file name> // since 4.11.3
ifdef::manual[see also : <<include_insert>>]

`include_append` <file name> // since 4.11.3
ifdef::manual[see also : <<include_append>>]

`NormalizeWinst` // (set normal window state) since 4.11.3
ifdef::manual[see also : <<NormalizeWinst>>]

`IconizeWinst` // (set minimized window state)
ifdef::manual[see also : <<IconizeWinst>>]

`MaximizeWinst` // (set maximized window state) // since 4.11.5.1
ifdef::manual[see also : <<MaximizeWinst>>]

`RestoreWinst` // (restore last window state)
ifdef::manual[see also : <<RestoreWinst>>]

`SetSkinDirectory` <path to skin.ini> // since 4.11.3.5
ifdef::manual[see also : <<SetSkinDirectory>>]

[[opsi-winst-rc-var]]
=== Variables [W/L]:

[[opsi-winst-rc-var-strings]]
==== Strings

`DefVar` <variable name>

`Set` <variable name> `=` <value>

ifdef::manual[see also : <<opsi-winst-strvar>>]

[[opsi-winst-rc-var-stringlists]]
==== Stringlists

`DefstringList`  <variable name>

ifdef::manual[see also : <<opsi-winst-lstvar>>]

[[opsi-winst-rc-func]]
=== Functions

[[opsi-winst-rc-func-string]]
==== String functions

[[opsi-winst-rc-important]]
===== Important

`GetOS`  // 'Linux' or 'Windows_NT'   [W/L]
ifdef::manual[see also : <<GetOS>>]

`getLinuxDistroType`  // 'debian' or 'redhat' or 'suse'  (see `getLinuxVersionMap`) [L]
ifdef::manual[see also : <<getLinuxDistroType>>]


`GetMsVersionInfo` //Windows Version Information [W]
ifdef::manual[see also : <<GetMsVersionInfo>>]

`GetSystemType`    //OS Architecture ("64 Bit System" or "x86 System") [W/L]
ifdef::manual[see also : <<GetSystemType>>]

`GetRegistrystringvalue (`"[key] var"`)` [W]
ifdef::manual[see also : <<GetRegistrystringvalue>>]

`GetRegistryStringValue32 (`"[key] var"`)`   //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValue32>>]

`GetRegistryStringValue64 (`"[key] var"`)`   //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValue64>>]

`GetRegistryStringValueSysNative (`"[key] var"`)`    //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValueSysNative>>]

`GetValueFromInifile (` file, section, key, default value `)` [W/L]
[source,winst]
----
GetValueFromInifile("myfile","mysec","mykey","")
----
ifdef::manual[see also : <<GetValueFromInifile>>]

`GetProductProperty (`<PropertyName>, <DefaultValue> `)` [W/L]
ifdef::manual[see also : <<GetProductProperty>>]

`GetConfidentialProductProperty (` <PropertyName>, <DefaultValue>`)` //since 4.11.5.2 [W/L]
ifdef::manual[see also : <<GetConfidentialProductProperty>>]

`trim(`<string>`)` [W/L]
ifdef::manual[see also : <<trim>>]

`lower(`<string>`)` [W/L]
ifdef::manual[see also : <<lower>>]

`unquote(`<string>,<quote-string>`)`  //since 4.11.2.1  [W/L]
ifdef::manual[see also : <<unquote>>]

`unquote2(`<string>,<quote-string>`)`  //since 4.11.5.2  [W/L]
ifdef::manual[see also : <<unquote2>>]

`stringReplace(`<string>, <oldPattern>, <newPattern>`)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<stringReplace>>]

`strLength(`<string>`)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strLength>>]

`strPos(`<string>, <sub string>`)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strPos>>]

`strPart(`<string>, <start pos>, <number of chars>`)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strPart>>]

`getValue(`<key string>, <hash string list> `)` [W/L]
ifdef::manual[see also : <<getValue>>]

`getValueBySeparator(`<key string>,<separator string>,<hash string list> `)` //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<getValueBySeparator>>]

`getValueFromFile(`<key string>, <file name>`)` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFile>>]

`getValueFromFileBySeparator(`<key string>,<separator string>,<file name>`)` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFileBySeparator>>]

`getLastExitCode : string (exitcode)` [W/L]
ifdef::manual[see also : <<getLastExitCode>>]

[[opsi-winst-rc-spec-license-management]]
===== Special: License Management

`DemandLicenseKey(` poolId [, productId [,windowsSoftwareId]] `)`
[source,winst]
----
set $mykey$ = DemandLicenseKey ("", "office2007")
----
ifdef::manual[see also : <<DemandLicenseKey>>]

`FreeLicense (`poolId [, productId [,windowsSoftwareId]]`)`
[source,winst]
----
set $result$ = FreeLicense("", "office2007")
----
ifdef::manual[see also : <<FreeLicense>>]

[[opsi-winst-rc-spec-usercontext]]
===== Special: Usercontext / loginscripts [W]:

`GetUserSID(`<Windows Username>`)`
ifdef::manual[see also : <<GetUserSID>>]

`GetLoggedInUser`   //since 4.11.1.2
ifdef::manual[see also : <<GetLoggedInUser>>]

`GetUsercontext`   //since 4.11.1.2
ifdef::manual[see also : <<getLastExitCode>>]

`GetScriptMode`  possible values 'Machine','Login' //since 4.11.2.1
ifdef::manual[see also : <<GetUsercontext>>]

`saveVersionToProfile` - save productversion-packageversion to local profile //since 4.11.2.1
ifdef::manual[see also : <<saveVersionToProfile>>]

`readVersionFromProfile` : string - read productversion-packageversion from local profile //since 4.11.2.1
ifdef::manual[see also : <<readVersionFromProfile>>]

`scriptWasExecutedBefore` : boolean - is true if saved and running productversion-packageversion are identical //since 4.11.2.1
ifdef::manual[see also : <<scriptWasExecutedBefore>>]



[[opsi-winst-rc-other]]
===== Other

`GetHostsName (`<hostaddress> `)` [W/L]
ifdef::manual[see also : <<GetHostsName>>]

`GetHostsAddr (`<hostname> `)` [W/L]
ifdef::manual[see also : <<GetHostsAddr>>]

`ExtractFilePath (`<path>`)` [W/L]
ifdef::manual[see also : <<ExtractFilePath>>]

`calculate(`<arithmetic string expression>`)` // since 4.11.3.5 : knows: `+-*/()` [W/L]
ifdef::manual[see also : <<calculate>>]

`DecStrToHexStr (` <decstring>, <hexlength>`)` [W/L]
ifdef::manual[see also : <<DecStrToHexStr>>]

`HexStrToDecStr (`<hexstring>`)` [W/L]
ifdef::manual[see also : <<HexStrToDecStr>>]

`base64EncodeStr(`<string>`)`  [W/L]
ifdef::manual[see also : <<base64EncodeStr>>]

`base64DecodeStr(`<string>`)`  [W/L]
ifdef::manual[see also : <<base64DecodeStr>>]

`convert2Jsonstr(`<string>`)`  //since 4.10.8.3


`RandomStr` [W/L]
ifdef::manual[see also : <<RandomStr>>]

`CompareDotSeparatedStrings(`<string1>, <string2>`) : string` [W/L]
ifdef::manual[see also : <<CompareDotSeparatedStrings_str>>]

`CompareDotSeparatedNumbers(`<string1>, <string2>`) : string` [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_str>>]

`EnvVar (`<environment variable>`)` [W/L]
ifdef::manual[see also : <<EnvVar>>]

`ParamStr` [W/L]
ifdef::manual[see also : <<ParamStr>>]

`getDiffTimeSec` (Time in seconds since last marktime) //since 4.11.3 [W/L]
ifdef::manual[see also : <<getDiffTimeSec>>]

`SidToName(`<well known sid>`)` //since 4.11.3: gives localized name of the sid [W]
ifdef::manual[see also : <<SidToName>>]

`GetMyIpByTarget(`<target ip addr>`) : string` //since 4.11.3.2 /4.11.6 [W/L]
ifdef::manual[see also : <<GetMyIpByTarget>>]

`GetIpByName(`<ip addr / ip name>`)` //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<GetIpByName>>]

`reencodestr(`<str>, <from>, <to>`)` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<reencodestr>>]

`strLoadTextFile (` <filename> `)` //since 4.11.4.6 [W/L]
ifdef::manual[see also : <<strLoadTextFile>>]

`strLoadTextFileWithEncoding (` <filename> , <encoding>`)` //since 4.11.4.6 [W/L]
ifdef::manual[see also : <<strLoadTextFileWithEncoding>>]

`GetShortWinPathName(<longpath string>)` //since 4.11.5.2 [W]
ifdef::manual[see also : <<GetShortWinPathName>>]

[[opsi-winst-rc-deprecated]]
===== Deprecated

`GetNtVersion` Deprecated - please use `GetMsVersionInfo` [W]
ifdef::manual[see also : <<GetMsVersionInfo>>]

`IniVar (`<key>`)` :	(deprecated; use GetProductProperty) [W]
ifdef::manual[see also : <<GetProductProperty>>]

`SubstringBefore (`<string1>, <string2>`)` (deprecated; use `splitString` / `takestring`) [W/L]
ifdef::manual[see also : <<splitString>>]

[[opsi-winst-rc-func-stringlist]]
==== String list functions

===== Important

`splitString (`<string1>, <string2>`)` [W/L]
[source,winst]
----
set $list1$ = splitString ("\\server\share\dir","\")
----
ifdef::manual[see also : <<splitString>>]

`splitStringOnWhiteSpace (`<string>`)` [W/L]
ifdef::manual[see also : <<splitStringOnWhiteSpace>>]

`loadTextFile (`<file name>`)` [W/L]
ifdef::manual[see also : <<loadTextFile>>]

`loadUnicodeTextFile (`<file name>`)` [W]
ifdef::manual[see also : <<loadUnicodeTextFile>>]

`loadTextFileWithEncoding(` <file name> `,` <encoding>`)` //since 4.11.5 [W/L]
ifdef::manual[see also : <<loadTextFileWithEncoding>>]

`composeString (`<string list>, <Link>`)` [W/L]
ifdef::manual[see also : <<composeString>>]

`takeString (`<index>, <list>`)` [W/L]
ifdef::manual[see also : <<takeString>>]

`setStringInListAtIndex(`<newstring>,<list>,<indexstr>`) : stringlist`   //since 4.11.6 [W/L]
ifdef::manual[see also : <<setStringInListAtIndex>>]

`takeFirstStringContaining(`<list>,<search string>`)` [W/L]
ifdef::manual[see also : <<takeFirstStringContaining>>]

`getOutStreamFromSection (`<dos section name>`)` [W/L]
[source,winst]
----
set $list$= getOutStreamFromSection ('DosInAnIcon_try')
----
ifdef::manual[see also : <<getOutStreamFromSection>>]

`shellCall (`<command string>`) : stringlist (output)` //since 4.11.4.2 [W/L]
[source,winst]
----
set $list$= shellCall('net start')
----
ifdef::manual[see also : <<shellCall_list>>]


`getReturnListFromSection (`<xml section name>`)` [W/L]
ifdef::manual[see also : <<getReturnListFromSection>>]

`getListContaining(`<list>,<search string>`)` [W/L]
ifdef::manual[see also : <<getListContaining>>]

`getListContainingList(`<list1>,<list2>`)`  //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<getListContainingList>>]

`count (`<list>`)` [W/L]
ifdef::manual[see also : <<count>>]

`emptylist (`<list>`)`  //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<emptylist>>]

`for %`<identifier>`% in` <list> `do` <one statement | sub section> [W/L]
[source,winst]
----
for %s% in $list1$ do sub_test_string
----
ifdef::manual[see also : <<forInDo>>]

`GetProcessList`   //since 4.11.1.2; gives list of exename;pid;dom/user [W/L]
ifdef::manual[see also : <<GetProcessList>>]

`getProductPropertyList(`<propname>,<default value>`)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<getProductPropertyList>>]

`getRegistryKeyList32(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyList32>>]

`getRegistryKeyList64(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyList64>>]

`getRegistryKeyListSysnative(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyListSysnative>>]

`getRegistryVarList32(`<regkey>`)`  //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarList32>>]

`getRegistryVarList64(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarList64>>]

`getRegistryVarListSysnative(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarListSysnative>>]

`getProfilesDirList` //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<getProfilesDirList>>]

===== Infomaps

`GetLocaleInfoMap` [W]
ifdef::manual[see also : <<GetLocaleInfoMap>>]

`GetMSVersionMap` [W]
ifdef::manual[see also : <<GetMSVersionMap>>]

`getLinuxVersionMap`  //since 4.11.4  [L] +
keys are (example):
[source,ini]
----  
Distributor ID=Ubuntu
Description=Ubuntu 12.04.2 LTS
Release=12.04
Codename=precise
kernel name=Linux
node name=detlefvm05
kernel release=3.2.0-40-generic-pae
kernel version=#64-Ubuntu SMP Mon Mar 25 21:44:41 UTC 2013
machine=i686
processor=athlon
hardware platform=i386
operating system=GNU/Linux
----
ifdef::manual[see also : <<getLinuxVersionMap>>]

`getFileInfoMap(` <file name> `)` [W]
ifdef::manual[see also : <<getFileInfoMap>>]

`getProductMap`  // since 4.11.2.4  [W/L] +
keys are: id, name, description, advice, productversion, packageversion, priority, installationstate, lastactionrequest, lastactionresult, installedversion, installedpackage, installedmodificationtime,actionrequest +
ifdef::manual[see also : <<getProductMap>>]

`getRegistryVarMap32(`<regkey>`)`  //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMap32>>]

`getRegistryVarMap64(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMap64>>]

`getRegistryVarMapSysnative(`<regkey>`)` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMapSysnative>>]

`getHWBiosInfoMap`  //since 4.11.4  [W/L]
ifdef::manual[see also : <<getHWBiosInfoMap>>]

===== Other

`createStringList (`<string0>, <string1> ,... `)` [W/L]
[source,winst]
----
set $list1$ = createStringList ('a','b')
----
ifdef::manual[see also : <<createStringList>>]

`reverse (`<list>`)` [W/L]
ifdef::manual[see also : <<reverse>>]

`getSectionNames(`<ini-file>`)` [W/L]
ifdef::manual[see also : <<getSectionNames>>]

`retrieveSection (`<section name>`)` [W/L]
ifdef::manual[see also : <<retrieveSection>>]

`getSubList (`<start index> : <end index>, <list>`)` [W/L]
ifdef::manual[see also : <<getSubList>>]

`addtolist(`<list>,<string>`)`	 //since 4.10.8 [W/L]
ifdef::manual[see also : <<addtolist>>]

`addListToList(`<dest list>,<src list>`)`	 //since 4.10.8 [W/L]
ifdef::manual[see also : <<addListToList>>]

`reencodestrlist(`<list>, <from>, <to>`)` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<reencodestrlist>>]

`removeFromListByContaining(`<search string>`,` <target list>`) : stringlist` //since 4.11.5.1 [W/L]
ifdef::manual[see also : <<removeFromListByContaining_str>>]

`removeFromListByContaining(`<search list>`,` <target list>`) : stringlist` //since 4.11.5.1 [W/L]
ifdef::manual[see also : <<removeFromListByContaining_list>>]

`removeFromListByMatch(`<searchstring>,<target list>`) : stringlist`   //since 4.11.6 [W/L]
ifdef::manual[see also : <<removeFromListByMatch>>]

[[opsi-winst-rc-func-bool]]
==== Boolean operators and functions

ifdef::manual[see also : <<opsi-winst-commands-if-else-bool-functions>>]


<string1> `=` <string2> [W/L]

<bool1> `AND` <bool2> [W/L]

<bool1> `OR` <bool2> [W/L]

`NOT`(<bool3>) [W/L]

`FileExists (`<file name>`)` [W/L]
ifdef::manual[see also : <<FileExists>>]

`FileExists32 (`<file name>`)` [W]
ifdef::manual[see also : <<FileExists>>]

`FileExists64 (`<file name>`)` [W]
ifdef::manual[see also : <<FileExists>>]

`FileExistsSysNative (`<file name>`)` [W]
ifdef::manual[see also : <<FileExists>>]

`LineExistsIn (`<string>, <file name>`)` [W/L]
ifdef::manual[see also : <<LineExistsIn>>]

`LineBeginning_ExistsIn (`<string>, <file name>`)` [W/L]
ifdef::manual[see also : <<LineBeginning_ExistsIn>>]

`LineContaining_ExistsIn(` <string>, <file name> `)` //since 4.11.4.10: true: if a in <file name> contains <string> [W/L]
ifdef::manual[see also : <<LineContaining_ExistsIn>>]

`XMLAddNamespace(`<XMLfilename>, <XMLelementname>, <XMLnamespace>`)` [W]
ifdef::manual[see also : <<XMLAddNamespace>>]

`XMLRemoveNamespace(`<XMLfilename>, <XMLelementname>, <XMLnamespace>`)` [W]
ifdef::manual[see also : <<XMLRemoveNamespace>>]

`HasMinimumSpace (`<drive letter>, <capacity>`)` [W]
ifdef::manual[see also : <<HasMinimumSpace>>]

Example:
[source,winst]
----
if not (HasMinimumSpace ("%SYSTEMDRIVE%", "500 MB"))
   LogError "Neede Space of 500 MB not available on %SYSTEMDRIVE%"
   isFatalError
endif
----

`opsiLicenseManagementEnabled` [W/L]
ifdef::manual[see also : <<opsiLicenseManagementEnabled>>]

`runningAsAdmin`    //since 4.11.1.1 [W/L]
ifdef::manual[see also : <<runningAsAdmin>>]

`isLoginScript`    //since 4.11.2.1 [W]
ifdef::manual[see also : <<isLoginScript>>]

`contains(`<str>, <substr>`) : bool`   //since 4.11.3: true if <substr> in <str> [W/L]
ifdef::manual[see also : <<contains>>]

`isNumber(`<str>`)` //since 4.11.3: true if <str> represents an integer [W/L]
ifdef::manual[see also : <<isNumber>>]

`runningOnUefi` //since 4.11.4.3: true: if the running OS was booted in UEFI mode [W]
ifdef::manual[see also : <<runningOnUefi>>]

`isDriveReady(`<drive letter>`)` //since 4.11.4.4: true: if the drive can be accessed [W]
ifdef::manual[see also : <<isDriveReady>>]

`saveTextFile(`<list>, < filename>`)` //since 4.11.4.4: true: if list is succesfully written to file [W/L]
ifdef::manual[see also : <<saveTextFile>>]

`saveTextFileWithEncoding(`<list>, < filename>`,` <encoding>`) : bool` //since 4.11.6.4: true: if list is succesfully written to file [W/L]
ifdef::manual[see also : <<saveTextFileWithEncoding>>]

`CompareDotSeparatedNumbers(`<str1>,<relation str>,<str2>`)`  //since 4.11.5.2: [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_bool>>]

`CompareDotSeparatedStrings(`<str1>,<relation str>,<str2>`)`  //since 4.11.5.2: [W/L]
ifdef::manual[see also : <<CompareDotSeparatedStrings_bool>>]




[[opsi-winst-rc-func-misc]]
==== Misc functions

`Killtask` <process name> [W/L]
ifdef::manual[see also : <<Killtask>>]

`requiredWinstVersion` <relation operator> <version> [W/L]
ifdef::manual[see also : <<requiredWinstVersion>>]
[source,winst]
----
requiredWinstVersion >= "4.10"
----

`UpdateEnvironment` //since 4.11.5 [W]: +
Subsequent calls of `winbatch` with the parameter `/RunElevated` will see the changed Environment (NT6 only).
ifdef::manual[see also : <<UpdateEnvironment>>]


[[opsi-winst-rc-flow-control]]
==== Flow control

'if - else - endif' [W/L]
ifdef::manual[see also : <<IfElseEndif>>]

Syntax:

`if` <condition> +
  ;statement(s) +
[`else` +
  ;statement(s)] +
`endif`

Example:
[source,winst]
----
Set $NTVer$ = GetMsVersionInfo
if ( $NTVer$ >= "6" )
     sub_install_win7
else
  if ( $NTVer$ = "5.1" )
    sub_install_winXP
  else
    stop "not a supported OS-Version"
  endif
endif
----

'for - to - do' Statement //since 4.11.5 [W/L]
ifdef::manual[see also : <<ForToDo>>]

`for` %<temporary string variable>% `=` <start string> `to` <end string> `do` <one statement> 


Example: 
[source,winst]
----
for %s% = "1" to "5" do sub_iteration_test
----

'Switch / Case' Statement //since 4.11.5 [W/L]
ifdef::manual[see also : <<SwitchCase>>]

Syntax:
----
Switch <string expression> 
  Case <string const>
    <statement(s)> 
  EndCase
  [DefaultCase
    <statement(s)> 
   EndCase]
EndSwitch
----


Example:

[source,winst]
----
set $ConstTest$ = "5"
Switch $ConstTest$
	Case "1"
		set $CompValue$ = "1"
	EndCase
	Case "2"
		set $CompValue$ = "2"
	EndCase
	DefaultCase
		set $CompValue$ = "notexisting"
	EndCase
EndSwitch
----


`isFatalError` [W/L]
ifdef::manual[see also : <<isFatalError>>]

`isFatalError` <string>  //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<isFatalError>>]

`isSuccess` //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<isSuccess>>]

`isSuspended` //since 4.11.4.1 [W/L]
ifdef::manual[see also : <<isSuspended>>]

`noUpdateScript` //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<noUpdateScript>>]

`ExitWindows /Reboot` [W/L]
ifdef::manual[see also : <<Reboot>>]

`ExitWindows /ImmediateReboot` [W/L]
ifdef::manual[see also : <<ImmediateReboot>>]

`ExitWindows /ImmediateLogout` [W]
ifdef::manual[see also : <<ImmediateLogout>>]

`ExitWindows /ShutdownWanted` [W]
ifdef::manual[see also : <<ShutdownWanted>>]

`ExitWindows /RebootWanted` (deprecated, acts like /Reboot) [W]
ifdef::manual[see also : <<Reboot>>]

`sleepSeconds` <Integer> or <string> : noresult [W/L]
ifdef::manual[see also : <<sleepSeconds>>]

`ChangeDirectory` <directory>   //since 4.11.2.6 [W/L]
ifdef::manual[see also : <<ChangeDirectory>>]

////
for to
isSuspenden
sub
include
err
opsiservicecall
////

[[opsi-winst-rc-secondary-sections]]
== Secondary Sections

[[opsi-winst-rc-winbatch]]
=== Winbatch [W/L]

ifdef::manual[see also : <<opsi-winst-winbatch>>]

Function: execute programs via operating system API

`[WinBatch`<identifier>`]` 

Modifier:

`/LetThemGo`

`/WaitForProcessEnding` "<program.exe>"

`/TimeOutSeconds` <seconds>

`/WaitForWindowAppearing` <window title> ('does not work with 64 Bit programs') [W]

`/WaitForWindowVanish` <window title> ('does not work with 64 Bit programs') [W]

`/RunElevated` // since 4.11.3: only at >= NT6 ; no network access [W]

`/RunAsLoggedOnUser` // since 4.11.3.5 ; works only inside 'userLoginScripts' [W]

`/32Bit`	 //since 4.11.3.5  [W]

`/64Bit`	 //since 4.11.3.5  [W]

`/SysNative`	 //since 4.11.3.5 [W]

[[opsi-winst-rc-dosbatch]]
=== DosBatch and DosInAnIcon (ShellBatch and ShellInAnIcon) [W/L]

ifdef::manual[see also : <<opsi-winst-dosbatch>>]

Function: Execute section via cmd.exe

`[DosBatch`<identifier>`]` <optional parameters> <winst <modifier>>

`[DosInAnIcon`<identifier>`]` <optional parameters> <winst <modifier>>

`[ShellBatch`<identifier>`]` <optional parameters> <winst <modifier>>

`[ShellInAnIcon`<identifier>`]` <optional parameters> <winst <modifier>>

Modifier:  //since 4.11.1.1

`/32Bit`  [W]

`/64Bit`  [W]

`/SysNative` [W]

`/showoutput` [W/L] // since 4.11.4.7

The modifiers has to be seperated by 'winst' from the parameters.
[source,winst]
----
DosInAnIcon_do_64bit_stuff winst /64Bit
----

Commands:
see manual

[[opsi-winst-rc-execwith]]
=== ExecWith [W/L]

ifdef::manual[see also : <<opsi-winst-execwith>>]

Function: Execute section via any interpreter

`[ExecWith`<identifier>`]` <path to interpreter>

Modifier:

`/LetThemGo`

`/EscapeStrings`

`/32Bit`	 //since 4.11.3.5  [W]

`/64Bit`	 //since 4.11.3.5  [W]

`/SysNative`	 //since 4.11.3.5 [W]

The modifiers has to be seperated by 'winst' from the parameters. The following example call the 64Bit version of the powershell.exe.
[source,winst]
----
ExecWith_do_64bit_stuff "%System%\WindowsPowerShell\v1.0\powershell.exe" winst /64Bit
----

Commands:
see manual

[[opsi-winst-rc-files]]
=== Files [W/L]

ifdef::manual[see also : <<opsi-winst-files>>]

Function: File Operations

`[Files`<identifier>`]` 

Modifier [W]:

`/AllNTUserProfiles`

`/AllNTUserSendTo` [W]

`/32Bit`	 //since 4.10.8 [W]

`/64Bit`	 //since 4.10.8  [W]

`/SysNative`	 //since 4.10.8 [W]

Commands:

`checkTargetPath =` <destination directory> [W/L]

`copy` [Options] <source file(s)> <destination directory> [W/L]

some options: 

`-s` recursive [W/L]

`-V` version control against targetdir [W]

`-v`  version control against targetdir, %systemroot% and %system% *(do not use it)*  [W]

`-c` continue without reboot even if it is needed [W]

`-d` date check [W]

`-u` update [W]

`-x` extract [W]

`-w` weak (do not overwrite protected files) [W]

`-n` no overwrite [W]

`-r` copy read only attribute [W]

`-h` follow symlinks [L]  //since 4.11.6.14


`delete` [Options] <path[/mask]]  //  [W/L]

some options: `-s` recursive `-f` force 

Example (*do not forget the trailing Backslash*): +
`delete -sf c:\delete_this_dir\`

`del` [Options] <path[/mask]]   //since 4.11.2.1 [W/L]

Works like `delete` but on +
`del -s -f c:\not-exists` +
if +c:\not-exists+ not exists it do not search complete +c:\+ for +not-exits+  

Example (*you may forget the trailing Backslash*): +
`del -sf c:\delete_this_dir`

`chmod` <mask> <path>   //since 4.11.4.1 [L]

`hardlink` <existing file> <new file> // since 4.11.5 [W/L]

`symlink` <existing file> <new file> // since 4.11.5 [W/L] +
At Windows `symlink` is only available at NT6 and up.

`rename` <old filename> <new filename> // since 4.11.5 [W/L]

`move` <old filename> <new filename> // since 4.11.5 [W/L]



[[opsi-winst-rc-registry]]
=== Registry [W]

ifdef::manual[see also : <<opsi-winst-registry>>]

Function: edit Registry

Standard method call: +
`[Registry`<identifier>`]` +
works with the specified section.

Alternative method call: +
`Registry  loadUnicodeTextFile(`<.reg file>`) /regedit` +
import the specified <.reg file>.

Alternative method call (deprecated): +
`Registry  loadUnicodeTextFile(`<.addreg file>`) /addreg` +
import the specified <.addreg file>.

Modifier:

`/AllNTUserDats`

`/32Bit`	 //since 4.10.8 

`/64Bit`	 //since 4.10.8 

`/SysNative`	 //since 4.10.8

Commands:

`OpenKey` <Key>
[source,winst]
----
openkey [HKLM\Software\opsi.org]
----

`Set` <varname> `=` <registry type>:<value>

`Add` <varname> `=` <registry type>:<value>

Examples for registry types:
[source,winst]
----
set "var1" = "my string"
set "var2" = REG_SZ:"my string"
set "var3" = REG_EXPAND_SZ:"%ProgramFiles%"
set "var4" = REG_DWORD:123	(Decimal)
set "var5" = REG_DWORD:0x7b	(Hexadecimal)
set "var6" = REG_BINARY:00 01 02 0F 10
set "var7" = REG_MULTI_SZ:"A|BC|de"
----

`Supp` <varname> <list char> <supplement>
[source,winst]
----
supp "Path" ; "C:\utils; %JAVABIN%"
----

`GetMultiSZFromFile` <varname> <file name>

`SaveValueToFile` <varname> <file name>

`DeleteVar` <varname>

`DeleteKey` <registry key>  (does since 4.11.2.1 also work with /AllNTUserDats)

[[opsi-winst-rc-patches]]
=== Patches [W/L]

ifdef::manual[see also : <<opsi-winst-patches>>]

Function: edit Ini-files

`[Patches`<identifier>`]` <file name>

Modifier:

`/AllNTUserProfiles`  //since 4.11.3  [W]

Commands:

`add [`<section name>`]` <variable1> `=` <value1>

`set [`<section name>`]`<variable1> `=` <value1>

`addnew [`<section name>`]`<variable1> `=` <value1>

`change [`<section name>`]`<variable1> `=` <value1>

`del [`<section name>`]` <variable1> `=` <value1>

`del [`<section name>`]` <variable1>

`delsec [`<section name>`]`

`replace` <variable1>`=`<value1> <variable2>`=`<value2>

[[opsi-winst-rc-patchtextfile]]
=== PatchTextFile [W/L]

ifdef::manual[see also : <<opsi-winst-patchtextfile>>]

Function: edit text files

`[PatchTextFile`<identifier>`]` <file name>

Modifier:

`/AllNTUserProfiles`  //since 4.11.3.4 [W]

Commands:

`Set_Mozilla_Pref (`"<preference type>", "<preference key>", "<preference value>"`)` +
preference types are usally: +
`pref`, `user_pref`, `lock_pref`

`AddStringListElement_To_Mozilla_Pref (`"<preference type>", "<preference key>", "<add value>"`)`

`Set_Netscape_User_Pref (`"<key>", "<value>"`)`  ('deprecated')

`AddstringListElement_To_Netscape_User_Pref`  ('deprecated')

`FindLine` <search string>

`FindLine_StartingWith` <search string>

`FindLine_Containing` <search string>

`GoToTop`

`AdvanceLine` [<number of lines>]

`GoToBottom`

`DeleteTheLine`

`AddLine_` <line> 	or `Add_Line_` <line>

`InsertLine` <line>    	or `Insert_Line_` <line>

`AppendLine` <line> 	or `Append_Line` <line>

`Append_File` <file name>

`Subtract_File` <file name>

`SaveToFile` <file name>

`Sorted`

`setKeyValueSeparator` <separator char> //since 4.11.4.4 [W/L]

`setValueByKey` <keystr> <valuestr> //since 4.11.4.4 [W/L]

[[opsi-winst-rc-LinkFolder]]
=== LinkFolder [W/L]

ifdef::manual[see also : <<opsi-winst-linkfolder>>]

Function: Startmenue + Desktop Icons

`[LinkFolder`<identifier>`]`

Commands:

`set_basefolder` <system folder>

`set_subfolder` <folder path> (at Linux set always "")

----
set_link
  name:            <link name>
  target:          <path and name of the program>
  parameters:      [command line arguments]
  working_dir:     [working directory]
  icon_file:       [path and name of icon file, default=target]
  icon_index:      [number of icon in icon file, default=0] [W]
  shortcut:        [keyboard shortcut for calling the target] [W]
  link_categories: [list of categories] [L]
end_link
----

`delete_element`   <link name>

`delete_subfolder` <folder path> [W]

The predefined virtual system folders which can be used are at Windows: +
`desktop, sendto, startmenu, startup, programs, desktopdirectory`, +
`common_startmenu, common_programs, common_startup, common_desktopdirectory` +
and at Linux: +
`common_programs`,`common_startup`,`desktop`, `startup`

Predefined `link_categories` for Linux: +
`AudioVideo`, `Audio`, `Video`, `Development`, `Education`, `Game`, `Graphics`, `Network`, `Office`, `Settings`, `System`, `Utility`

Examples
[source,winst]
----
set_basefolder common_desktopdirectory
set_subfolder ""
set_link
  name: opsi-winst
  target: "%ProgramFiles32Dir%\opsi.org\opsi-client-agent\opsi-winst\winst32.exe"
end_link
----

[source,winst]
----
[LinkFolder_configed_lin]
set_basefolder common_programs
set_subfolder ""

set_link
  name: opsi-configed-Local
  target: java 
  parameters: $parameter$
  icon_file: "$InstallDir$/opsi.png"
  link_categories: System;Utility;
end_link
----

The predefined virtual system folders: +
`desktop, sendto, startmenu, startup, programs, desktopdirectory` +
are pointing to the folders of the user that the script is running.
If you use it in a userLoginScript with the opsi 'User Profile Management' extension these virtual folders point to the folder of the user that just had logged in.

'shortcut' defaults to empty. // since 4.11.6.7 +
`shortcut` may be a combination of ['shift','alt','ctrl'] (not case sensitiv) divided by ' ', '-','+' an a 'Key' or a 'Virtual Key Code'. +
The 'Key' is a letter ('A' - 'Z') or a numeral ('0' - '9'). All other Keys must be given by there 'Virtual Key Code' identifier. To get these identifier (as well as the allowed combinations) just use the following helper program: +
http://download.uib.de/opsi4.0/helper/showkeys.exe

[[opsi-winst-rc-OpsiServiceCall]]
=== OpsiServiceCall [W/L]

ifdef::manual[see also : <<opsi-winst-opsiservicecall>>]

Function: opsi-Service access

`[OpsiServiceCall`<identifier>`]`

Commands:
see manual

[[opsi-winst-rc-PatchHosts]]
=== PatchHosts [W/L]

ifdef::manual[see also : <<opsi-winst-patchhosts>>]

Function: hosts-files bearbeiten

`[PatchHosts`<identifier>`]`

Commands:

`setaddr`  <hostname> <IPaddress>

`setname` <IPaddress> <hostname>

`setalias` <hostname> <alias>

`setalias` <IPadresse> <alias>

`delalias` <hostname> <alias>

`delalias` <IPaddress> <alias>

`delhost` <hostname>

`delhost` <ipadresse>

`setComment` <ident> <comment>

[[opsi-winst-rc-XMLPatch]]
=== XMLPatch [W]

ifdef::manual[see also : <<opsi-winst-xmlpatch>>]

Function: edit XML files

`[XMLPatch`<identifier>`]`

Commands:
see manual

[[opsi-winst-rc-ExecPython]]
=== ExecPython [W/L]

ifdef::manual[see also : <<opsi-winst-execpython>>]

Function: Execute section via python interpreter

`[ExecPython`<identifier>`]`

Commands:
see manual

[[opsi-winst-rc-LdapSearch]]
=== LdapSearch [W]

ifdef::manual[see also : <<opsi-winst-ldapsearch>>]

Function: read from LDAP

`[LdapSearch`<identifier>`]`

Commands:
see manual

[[opsi-winst-rc-topic]]
== By Topic

[[opsi-winst-rc-json]]
=== opsiservicecall and json Related functions [W/L]

`jsonIsValid(`<jsonstr>`) : boolean`  //since 4.11.6: [W/L] 
ifdef::manual[see also : <<jsonIsValid>>]

`jsonIsArray(`<jsonstr>`) : boolean`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonIsArray>>]

`jsonIsObject(`<jsonstr>`) : boolean`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonIsObject>>]

`jsonAsObjectHasKey(`<jsonstr>,<keystr>`) : boolean`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectHasKey>>]

`jsonAsArrayCountElements(`<jsonstr>`) : intstr`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsArrayCountElements>>]

`jsonAsObjectCountElements(`<jsonstr>`) : intstr`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectCountElements>>]

`jsonAsArrayGetElementByIndex(`<jsonstr>, <indexstr>`) : jsonstring`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsArrayGetElementByIndex>>]

`jsonAsObjectGetValueByKey(`<jsonstr>, <keystr>`) : valuestring`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectGetValueByKey>>]

`jsonAsObjectSetValueByKey(`<jsonstr>, <keystr>,<valuestring>`) : jsonstring`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectSetValueByKey>>]

`jsonAsObjectSetStringtypeValueByKey(`<jsonstr>, <keystr>,<valuestring>`) : jsonstring`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectSetStringtypeValueByKey>>]

`jsonAsObjectDeleteByKey(`<jsonstr>, <keystr>`) : jsonstring`  //since 4.11.6.4: [W/L]
ifdef::manual[see also : <<jsonAsObjectDeleteByKey>>]

`jsonAsArrayPutObjectByIndex(`<jsonstr>, <indexstr>, <objectstr>`) : jsonstring`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsArrayPutObjectByIndex>>]

`jsonAsArrayDeleteObjectByIndex(`<jsonstr>, <indexstr>`) : jsonstring`  //since 4.11.6.4: [W/L]
ifdef::manual[see also : <<jsonAsArrayDeleteObjectByIndex>>]

`jsonAsArrayToStringList(`<jsonstr>`) : stringlist`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsArrayToStringList>>]

`jsonAsObjectGetKeyList(`<jsonstr>`) : stringlist`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonIsArray>>]

`jsonStringListToJsonArray(`<strlist>`) : jsonstr`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectGetKeyList>>]

`convert2Jsonstr(`<string>`)`  //since 4.10.8.3


see also: OpsiServiceCall  <<opsi-winst-rc-OpsiServiceCall>>

ifdef::manual[see also : <<opsi-winst-json>>]

ifdef::manual[see also : <<opsi-winst-opsiservicecall>>] 


[[opsi-winst-rc-process]]
=== Process and Script Related functions [W/L]

`Killtask` <process name> ` : noresult` [W/L]
ifdef::manual[see also : <<Killtask>>]

`ChangeDirectory` <directory>  ` : noresult`  //since 4.11.2.6 [W/L]
ifdef::manual[see also : <<ChangeDirectory>>]

`GetProcessList : stringlist`  //since 4.11.1.2; gives list of exename;pid;dom/user [W/L]
ifdef::manual[see also : <<GetProcessList>>]

`processIsRunning(`<process name>`) : boolean`  //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<processIsRunning>>]

`shellCall (`<command string>`) : stringlist (output)` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<shellCall_list>>]

[source,winst]
----
set $list$= shellCall('net start')
----


`shellCall (`<command string>`) : noresult` //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<shellCall>>]

`shellCall (`<command string>`) : string (exitcode)` //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<shellCall_str>>]

`getOutStreamFromSection (`<dos section name>`) : stringlist (output)` [W/L]
[source,winst]
----
set $list$= getOutStreamFromSection ('DosInAnIcon_try')
----
ifdef::manual[see also : <<getOutStreamFromSection>>]
ifdef::manual[see also : <<opsi-winst-dosbatch-catchout>>]

`processCall(`<string>`) : string (exitcode)` //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<processCall>>]

`getLastExitCode : string (exitcode)` [W/L]
ifdef::manual[see also : <<getLastExitCode>>]

`includelog` <file name> <tail size> `: noresult`  //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<includelog>>]

`includelog` <file name> <tail size> [<encoding>] `: noresult` //since 4.11.4.1 [W/L]
ifdef::manual[see also : <<includelog>>]

`waitForPackageLock(`<seconds timeout string>,<bool should we kill>`) : bool` //since 4.11.6.1 [L]
ifdef::manual[see also : <<waitForPackageLock>>]


see also: ExecWith sections <<opsi-winst-rc-execwith>>

see also: ShellBatch sections <<opsi-winst-rc-dosbatch>>

see also: Winbatch sections <<opsi-winst-rc-winbatch>>

[[opsi-winst-rc-compare]]
=== Compare related functions [W/L]

`CompareDotSeparatedStrings(`<string1>, <string2>`) : string` [W/L]
ifdef::manual[see also : <<CompareDotSeparatedStrings_str>>]

`CompareDotSeparatedStrings(`<str1>,<relation str>,<str2>`) : bool`  //since 4.11.5.2: [W/L]
ifdef::manual[see also : <<CompareDotSeparatedStrings_bool>>]


`CompareDotSeparatedNumbers(`<string1>, <string2>`) : string` [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_str>>]

`CompareDotSeparatedNumbers(`<str1>,<relation str>,<str2>`) : bool`  //since 4.11.5.2: [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_bool>>]

`boolToString(`<boolean expression>`)` : bool string (true/false) // since 4.12.0.0 [W/L]
ifdef::manual[see also : <<boolToString>>]

`stringToBool(`<string expression: true/false>`)` : boolean // since 4.12.0.0 [W/L]
ifdef::manual[see also : <<stringToBool>>]


[[opsi-winst-rc-string-handling]]
=== String handling functions [W/L]

`splitString (`<string1>, <string2>`) : stringlist` [W/L]
ifdef::manual[see also : <<splitString>>]
[source,winst]
----
set $list1$ = splitString ("\\server\share\dir","\")
----

`splitStringOnWhiteSpace (`<string>`)  : stringlist` [W/L]
ifdef::manual[see also : <<splitStringOnWhiteSpace>>]

`composeString (`<string list>, <Link>`) : string` [W/L]
ifdef::manual[see also : <<composeString>>]

`takeString (`<index>, <list>`) : string` [W/L]
ifdef::manual[see also : <<takeString>>]

`setStringInListAtIndex(`<newstring>,<list>,<indexstr>`) : stringlist` //since 4.11.6  [W/L]
ifdef::manual[see also : <<setStringInListAtIndex>>]

`takeFirstStringContaining(`<list>,<search string>`) : string` [W/L]
ifdef::manual[see also : <<takeFirstStringContaining>>]

`contains(`<str>, <substr>`) : bool`  //since 4.11.3: true if <substr> in <str> [W/L]
ifdef::manual[see also : <<contains>>]

`isNumber(`<str>`) : bool` //since 4.11.3: true if <str> represents an integer [W/L]
ifdef::manual[see also : <<isNumber>>]

`trim(`<string>`) : string` [W/L]
ifdef::manual[see also : <<trim>>]

`lower(`<string>`) : string` [W/L]
ifdef::manual[see also : <<lower>>]

`unquote(`<string>,<quote-string>`) : string`  //since 4.11.2.1  [W/L]
ifdef::manual[see also : <<unquote>>]

`unquote2(`<string>,<quote-string>`) : string`  //since 4.11.5.2  [W/L]
ifdef::manual[see also : <<unquote2>>]

`stringReplace(`<string>, <oldPattern>, <newPattern>`) : string`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<stringReplace>>]

`strLength(`<string>`) : string (number)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strLength>>]

`strPos(`<string>, <sub string>`) : string (numner)`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strPos>>]

`strPart(`<string>, <start pos>, <number of chars>`) : string`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<strPart>>]

`getValue(`<key string>, <hash string list> `) : string` [W/L]
ifdef::manual[see also : <<getValue>>]

`getValueBySeparator(`<key string>,<separator string>,<hash string list> `) : string` //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<getValueBySeparator>>]

`getValueFromFile(`<key string>, <file name>`) : string` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFile>>]

`getValueFromFileBySeparator(`<key string>,<separator string>,<file name>`) : string` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFileBySeparator>>]


[[opsi-winst-rc-stringlist-handling]]
=== Stringlist handling functions [W/L]

`getListContaining(`<list>,<search string>`) : stringlist` [W/L]
ifdef::manual[see also : <<getListContaining>>]

`getListContainingList(`<list1>,<list2>`) : stringlist`  //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<getListContainingList>>]

`count (`<list>`) : string (number)` [W/L]
ifdef::manual[see also : <<count>>]

`emptylist (`<list>`)  : stringlist`  //since 4.11.3.7 [W/L]
ifdef::manual[see also : <<emptylist>>]

`for %`<identifier>`% in` <list> `do` <one statement | sub section> [W/L]
[source,winst]
----
for %s% in $list1$ do sub_test_string
----
ifdef::manual[see also : <<opsi-winst-stringlist-iteration>>]

`createStringList (`<string0>, <string1> ,... `) : stringlist` [W/L]
[source,winst]
----
set $list1$ = createStringList ('a','b')
----
ifdef::manual[see also : <<createStringList>>]

`reverse (`<list>`) : stringlist` [W/L]
ifdef::manual[see also : <<reverse>>]

`getSubList (`<start index> : <end index>, <list>`) : stringlist` [W/L]
ifdef::manual[see also : <<getSubList>>]

`addtolist(`<list>,<string>`) : stringlist`	 //since 4.10.8 [W/L]
ifdef::manual[see also : <<addtolist>>]

`addListToList(`<dest list>,<src list>`) : stringlist`	 //since 4.10.8 [W/L]
ifdef::manual[see also : <<addListToList>>]

`reencodestrlist(`<list>, <from>, <to>`) : stringlist` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<reencodestrlist>>]

`removeFromListByContaining(`<search string>`,` <target list>`) : stringlist` //since 4.11.5.1 [W/L]
ifdef::manual[see also : <<removeFromListByContaining_str>>]

`removeFromListByContaining(`<search list>`,` <target list>`) : stringlist` //since 4.11.5.1 [W/L]
ifdef::manual[see also : <<removeFromListByContaining_list>>]

`removeFromListByMatch(`<searchstring>,<target list>`) : stringlist`   //since 4.11.6 [W/L]
ifdef::manual[see also : <<removeFromListByMatch>>]

`takeString (`<index>, <list>`) : string` [W/L]
ifdef::manual[see also : <<takeString>>]

`takeFirstStringContaining(`<list>,<search string>`) : string` [W/L]
ifdef::manual[see also : <<takeFirstStringContaining>>]

`setStringInListAtIndex(`<newstring>,<list>,<indexstr>`) : stringlist`   //since 4.11.6 [W/L]
ifdef::manual[see also : <<setStringInListAtIndex>>]

`jsonAsArrayToStringList(`<jsonstr>`) : stringlist`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsArrayToStringList>>]

`jsonStringListToJsonArray(`<strlist>`) : jsonstr`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonStringListToJsonArray>>]

`jsonAsObjectGetKeyList(`<jsonstr>`) : stringlist`  //since 4.11.6: [W/L]
ifdef::manual[see also : <<jsonAsObjectGetKeyList>>]

`splitString(`<string1>, <string2>`)` : stringlist [W/L]
[source,winst]
----
set $list1$ = splitString ("\\server\share\dir","\")
----
ifdef::manual[see also : <<splitString>>]

`splitStringOnWhiteSpace (`<string>`)  : stringlist` [W/L]
ifdef::manual[see also : <<splitStringOnWhiteSpace>>]

`composeString(`<string list>, <Link>`) : string` [W/L]
ifdef::manual[see also : <<composeString>>]

`getValue(`<key string>, <hash string list> `) : string` [W/L]
ifdef::manual[see also : <<getValue>>]

`getValueBySeparator(`<key string>,<separator string>,<hash string list> `) : string` //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<getValueBySeparator>>]


[[opsi-winst-rc-regfunc]]
=== Registry related functions [W]

`GetRegistrystringvalue(`"[key] var"`) : string` [W]
ifdef::manual[see also : <<GetRegistrystringvalue>>]

`GetRegistryStringValue32 (`"[key] var"`) : string`   //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValue32>>]

`GetRegistryStringValue64 (`"[key] var"`) : string`   //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValue64>>]

`GetRegistryStringValueSysNative (`"[key] var"`) : string`    //since 4.10.8 [W]
ifdef::manual[see also : <<GetRegistryStringValueSysNative>>]

`getRegistryKeyList32(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyList32>>]

`getRegistryKeyList64(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyList64>>]

`getRegistryKeyListSysnative(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryKeyListSysnative>>]

`getRegistryVarList32(`<regkey>`) : stringlist`  //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarList32>>]

`getRegistryVarList64(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarList64>>]

`getRegistryVarListSysnative(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarListSysnative>>]

`getRegistryVarMap32(`<regkey>`) : stringlist`  //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMap32>>]

`getRegistryVarMap64(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMap64>>]

`getRegistryVarMapSysnative(`<regkey>`) : stringlist` //since 4.11.3 [W]
ifdef::manual[see also : <<getRegistryVarMapSysnative>>]

see also: <<opsi-winst-rc-registry>> 

ifdef::manual[see also : <<opsi-winst-registry>>]

ifdef::manual[see also : <<opsi-winst-64bit>>]

[[opsi-winst-rc-filefunc]]
=== File related functions [W/L]

`strLoadTextFile (`<file name>`) : string` [W/L]
ifdef::manual[see also : <<strLoadTextFile>>]

`strLoadTextFileWithEncoding (` <filename> , <encoding>`) : string` //since 4.11.4.6 [W/L]
ifdef::manual[see also : <<strLoadTextFileWithEncoding>>]

`loadTextFile (`<file name>`) : stringlist` [W/L]
ifdef::manual[see also : <<loadTextFile>>]

`loadUnicodeTextFile (`<file name>`) : stringlist` [W]
ifdef::manual[see also : <<loadUnicodeTextFile>>]

`loadTextFileWithEncoding(` <file name> `,` <encoding>`) : stringlist` //since 4.11.5 [W/L]
ifdef::manual[see also : <<loadTextFileWithEncoding>>]

`FileExists (`<file name>`) : bool` [W/L]
ifdef::manual[see also : <<FileExists>>]

`FileExists32 (`<file name>`) : bool` [W]
ifdef::manual[see also : <<FileExists>>]

`FileExists64 (`<file name>`) : bool` [W]
ifdef::manual[see also : <<FileExists>>]

`FileExistsSysNative (`<file name>`) : bool` [W]
ifdef::manual[see also : <<FileExists>>]

`LineExistsIn (`<string>, <file name>`) : bool` [W/L]
ifdef::manual[see also : <<LineExistsIn>>]

`LineBeginning_ExistsIn (`<string>, <file name>`) : bool` [W/L]
ifdef::manual[see also : <<LineBeginning_ExistsIn>>]

`LineContaining_ExistsIn(` <string>, <file name> `) : bool` //since 4.11.4.10: true: if a in <file name> contains <string> [W/L]
ifdef::manual[see also : <<LineContaining_ExistsIn>>]

`saveTextFile(`<list>, < filename>`) : bool` //since 4.11.4.4: true: if list is succesfully written to file [W/L]
ifdef::manual[see also : <<saveTextFile>>]

`saveTextFileWithEncoding(`<list>, < filename>`,` <encoding>`) : bool` //since 4.11.6.4: true: if list is succesfully written to file [W/L]
ifdef::manual[see also : <<saveTextFileWithEncoding>>]

`getFileInfoMap(` <file name> `) : stringlist` [W]
ifdef::manual[see also : <<getFileInfoMap>>]

`getFileInfoMap32(` <file name> `) : stringlist` //since 4.11.6.6 [W]
ifdef::manual[see also : <<getFileInfoMap>>]

`getFileInfoMap64(` <file name> `) : stringlist` //since 4.11.6.6 [W]
ifdef::manual[see also : <<getFileInfoMap>>]

`getFileInfoMapSysnative(` <file name> `) : stringlist` //since 4.11.6.6 [W]
ifdef::manual[see also : <<getFileInfoMap>>]

`ExtractFilePath (`<path>`) : string` [W/L]
ifdef::manual[see also : <<ExtractFilePath>>]


see also: <<opsi-winst-rc-files>> 

see also: <<opsi-winst-rc-patchtextfile>>

[[opsi-winst-rc-inifunc]]
=== Ini file related functions [W/L]

`GetValueFromInifile (` file, section, key, default value `) : string` [W/L]
[source,winst]
----
GetValueFromInifile("myfile","mysec","mykey","")
----
ifdef::manual[see also : <<GetValueFromInifile>>]

`getSectionNames(`<ini-file>`) : stringlist` [W/L]
ifdef::manual[see also : <<getSectionNames>>]

`retrieveSection (`<section name>`) : stringlist` [W/L]
ifdef::manual[see also : <<retrieveSection>>]

`getValue(`<key string>, <hash string list> `) : string` [W/L]
ifdef::manual[see also : <<getValue>>]

`getValueBySeparator(`<key string>,<separator string>,<hash string list> `) : string` //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<getValueBySeparator>>]

`getValueFromFile(`<key string>, <file name>`) : string` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFile>>]

`getValueFromFileBySeparator(`<key string>,<separator string>,<file name>`) : string` //since 4.11.4.4 [W/L]
ifdef::manual[see also : <<getValueFromFileBySeparator>>]

see also: <<opsi-winst-rc-patches>>

[[opsi-winst-rc-cryptfunc]]
=== Crypt / Hash related functions [W/L]

`DecStrToHexStr (` <decstring>, <hexlength>`) : string` [W/L]
ifdef::manual[see also : <<DecStrToHexStr>>]

`HexStrToDecStr (`<hexstring>`) : string` [W/L]
ifdef::manual[see also : <<HexStrToDecStr>>]

`base64EncodeStr(`<string>`) : string`  [W/L]
ifdef::manual[see also : <<base64EncodeStr>>]

`base64DecodeStr(`<string>`) : string`  [W/L]
ifdef::manual[see also : <<base64DecodeStr>>]

`RandomStr : string` [W/L]
ifdef::manual[see also : <<RandomStr>>]

`encryptStringBlow(`<keystring>,<datastring>`) : string` [W/L]
ifdef::manual[see also : <<encryptStringBlow>>]

`decryptStringBlow(`<keystring>,<datastring>`) : string` [W/L]
ifdef::manual[see also : <<decryptStringBlow>>]

`md5sumFromFile(`<path to file>`) : string` [W/L]
ifdef::manual[see also : <<md5sumFromFile>>]


[[opsi-winst-rc-numberfunc]]
=== Number related functions [W/L]

`isNumber(`<str>`) : bool` //since 4.11.3: true if <str> represents an integer [W/L]
ifdef::manual[see also : <<isNumber>>]

`CompareDotSeparatedNumbers(`<str1>,<relation str>,<str2>`) : bool`  //since 4.11.5.2: [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_bool>>]

`CompareDotSeparatedNumbers(`<string1>, <string2>`) : string` [W/L]
ifdef::manual[see also : <<CompareDotSeparatedNumbers_str>>]

`calculate(`<arithmetic string expression>`) : string (number)` // since 4.11.3.5 : knows: `+-*/()` [W/L]
ifdef::manual[see also : <<calculate>>]

`DecStrToHexStr (` <decstring>, <hexlength>`) : string` [W/L]
ifdef::manual[see also : <<DecStrToHexStr>>]

`HexStrToDecStr (`<hexstring>`) : string` [W/L]
ifdef::manual[see also : <<HexStrToDecStr>>]

[[opsi-winst-rc-OSfunc]]
=== Operating System related functions [W/L]

`GetOS : string`  // 'Linux' or 'Windows_NT'   [W/L]
ifdef::manual[see also : <<GetOS>>]

`getLinuxDistroType : string`  // 'debian' or 'redhat' or 'suse'  (see `getLinuxVersionMap`) [L]
ifdef::manual[see also : <<getLinuxDistroType>>]

`GetMsVersionInfo : string` //Windows Version Information [W]
ifdef::manual[see also : <<GetMsVersionInfo>>]

`GetMSVersionMap : stringlist` [W]
ifdef::manual[see also : <<GetMSVersionMap>>]

`getLinuxVersionMap : stringlist`  //since 4.11.4  [L]
ifdef::manual[see also : <<getLinuxVersionMap>>]

`GetSystemType : string`    //OS Architecture ("64 Bit System" or "x86 System") [W/L]
ifdef::manual[see also : <<GetSystemType>>]

`EnvVar (`<environment variable>`) : string` [W/L]
ifdef::manual[see also : <<EnvVar>>]

`getProfilesDirList : stringlist` //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<getProfilesDirList>>]


[[opsi-winst-rc-networkfunc]]
=== Network related functions [W/L]

`GetHostsName (`<hostaddress> `) : string` [W/L]
ifdef::manual[see also : <<GetHostsName>>]

`GetHostsAddr (`<hostname> `) : string` [W/L]
ifdef::manual[see also : <<GetHostsAddr>>]

`GetMyIpByTarget(`<target ip addr>`) : string` //since 4.11.3.2 /4.11.6 [W/L]
ifdef::manual[see also : <<GetMyIpByTarget>>]

`GetIpByName(`<ip addr / ip name>`) : string` //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<GetIpByName>>]

[[opsi-winst-rc-encodingfunc]]
=== Encoding related functions [W/L]

`encoding=`<encoding> // (default is system encoding) since 4.11.4.2
ifdef::manual[see also : <<encoding>>]

`GetLocaleInfoMap : stringlist` [W]
ifdef::manual[see also : <<GetLocaleInfoMap>>]

`reencodestr(`<str>, <from>, <to>`) : string` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<reencodestr>>]

`reencodestrlist(`<list>, <from>, <to>`) : stringlist` //since 4.11.4.2 [W/L]
ifdef::manual[see also : <<reencodestrlist>>]

`loadUnicodeTextFile (`<file name>`) : stringlist` [W]
ifdef::manual[see also : <<loadUnicodeTextFile>>]

`loadTextFileWithEncoding(` <file name> `,` <encoding>`) : stringlist` //since 4.11.5 [W/L]
ifdef::manual[see also : <<loadTextFileWithEncoding>>]

`strLoadTextFileWithEncoding (` <filename> , <encoding>`) : string` //since 4.11.4.6 [W/L]
ifdef::manual[see also : <<strLoadTextFileWithEncoding>>]

`saveTextFileWithEncoding(`<list>, < filename>`,` <encoding>`) : bool` //since 4.11.6.4: true: if list is succesfully written to file [W/L]
ifdef::manual[see also : <<saveTextFileWithEncoding>>]

`includelog` <file name> <tail size> [<encoding>]  ` : noresult`//since 4.11.4.1 [W/L]
ifdef::manual[see also : <<includelog>>]

ifdef::manual[see also : <<opsi-winst-encoding>>]

[[opsi-winst-rc-opsifunc]]
=== opsi related functions [W/L]

`getProductMap : stringlist`  // since 4.11.2.4  [W/L] +
keys are: id, name, description, advice, productversion, packageversion, priority, installationstate, lastactionrequest, lastactionresult, installedversion, installedpackage, installedmodificationtime,actionrequest
ifdef::manual[see also : <<getProductMap>>]

`getProductPropertyList(`<propname>,<default value>`) : stringlist`  //since 4.11.3 [W/L]
ifdef::manual[see also : <<getProductPropertyList>>]

`GetProductProperty (`<PropertyName>, <DefaultValue> `) : string` [W/L]
ifdef::manual[see also : <<GetProductProperty>>]

`GetConfidentialProductProperty (` <PropertyName>, <DefaultValue>`) : string` //since 4.11.5.2 [W/L]
ifdef::manual[see also : <<GetConfidentialProductProperty>>]

`setActionProgress <string>` : noresult //since 4.11.3 [W/L]
ifdef::manual[see also : <<setActionProgress>>]

[[opsi-winst-rc-usercontext]]
=== Usercontext / loginscripts related functions [W]:

`GetUserSID(`<Windows Username>`) : string`
ifdef::manual[see also : <<GetUserSID>>]

`GetLoggedInUser : string`   //since 4.11.1.2
ifdef::manual[see also : <<GetLoggedInUser>>]

`GetUsercontext : string`   //since 4.11.1.2
ifdef::manual[see also : <<GetUsercontext>>]

`GetScriptMode : string`  possible values 'Machine','Login' //since 4.11.2.1
ifdef::manual[see also : <<GetScriptMode>>]

`saveVersionToProfile : noresult` - save productversion-packageversion to local profile //since 4.11.2.1
ifdef::manual[see also : <<saveVersionToProfile>>]

`readVersionFromProfile : string` - read productversion-packageversion from local profile //since 4.11.2.1
ifdef::manual[see also : <<readVersionFromProfile>>]

`scriptWasExecutedBefore : boolean` - is true if saved and running productversion-packageversion are identical //since 4.11.2.1
ifdef::manual[see also : <<scriptWasExecutedBefore>>]

[[opsi-winst-rc-license-management]]
=== License Management related functions [W/L]

`DemandLicenseKey(` poolId [, productId [,windowsSoftwareId]] `) : string`
[source,winst]
----
set $mykey$ = DemandLicenseKey ("", "office2007")
----
ifdef::manual[see also : <<DemandLicenseKey>>]

`FreeLicense (`poolId [, productId [,windowsSoftwareId]]`) : string`
[source,winst]
----
set $result$ = FreeLicense("", "office2007")
----
ifdef::manual[see also : <<FreeLicense>>]

`getLastServiceErrorClass`  : string
ifdef::manual[see also : <<getLastServiceErrorClass>>]

`getLastServiceErrorMessage`  : string
ifdef::manual[see also : <<getLastServiceErrorMessage>>]

* `opsiLicenseManagementEnabled` : bool 
ifdef::manual[see also : <<opsiLicenseManagementEnabled>>]

[[opsi-winst-rc-timefunc]]
=== Time / Date related functions [W/L]

`sleepSeconds` <Integer> or <string> : noresult [W/L] +
breaks the program execution for <string> seconds. <string> has to represent an Integer Value +
ifdef::manual[see also : <<sleepSeconds>>]

`markTime` : noresult +
sets a time stamp for the current system time and logs it. 
ifdef::manual[see also : <<markTime>>]


`getDiffTimeSec : string` (Time in seconds since last marktime) //since 4.11.3 [W/L]
ifdef::manual[see also : <<getDiffTimeSec>>]

`timeStampAsFloatStr : string` (Floating Number - format: 'days.decimal days') //since 4.11.6 [W/L]
ifdef::manual[see also : <<timeStampAsFloatStr>>]

[[opsi-winst-rc-logging]]
=== Logging related functions [W/L]

`SetLogLevel` = <number> or `SetLogLevel` = <string> // (default=6)
[source,winst]
----
SetLogLevel = 7
SetLogLevel = "7"
----
ifdef::manual[see also : <<SetLogLevel>>]

`Message` <string> or `Message` = <const string>
ifdef::manual[see also : <<Message>>]

`comment` <string> or `comment` = <const string>
ifdef::manual[see also : <<comment>>]

`LogError` <string> or `LogError` = <const string>
ifdef::manual[see also : <<scriptWasExecutedBefore>>]

`LogWarning` <string> or `LogWarning` = <const string>
ifdef::manual[see also : <<LogError>>]

`includelog` <file name> <tail size>   //since 4.11.2.1 [W/L]
ifdef::manual[see also : <<includelog>>]

`includelog` <file name> <tail size> [<encoding>]  //since 4.11.4.1 [W/L]
ifdef::manual[see also : <<includelog>>]

[source,winst]
----
includelog "%Scriptpath%\test-files\10lines.txt" "5"
----

`SetConfidential` <secret string> //since 4.11.3.5 [W/L]
ifdef::manual[see also : <<SetConfidential>>]

*opsi-configs*

ifdef::manual[see also : <<opsi-winst-configs>>]

`opsi-script.global.debug_prog` : boolean ; if false: only Warnings and Errors from program logging; default: false

`opsi-script.global.debug_lib` : boolean ; if false: only Warnings and Errors from library logging; default: false

`opsi-script.global.default_loglevel` : intstr ; set the default log level; default: '6'

`opsi-script.global.force_min_loglevel` : intstr ; set the minimal loglevel; default: '0'


[[opsi-winst-rc-err]]
=== Error / Warning related functions [W/L]

`ExitOnError` = <boolean value> // (default=false)
ifdef::manual[see also : <<ExitOnError>>]

`ScriptErrorMessages =` <boolean value> // (default=true)
ifdef::manual[see also : <<ScriptErrorMessages>>]

`FatalOnSyntaxError =` <boolean value>  // (default=true) since 4.11.3.2
ifdef::manual[see also : <<FatalOnSyntaxError>>]

`FatalOnRuntimeError =` <boolean value>  // (default=false) since 4.11.3.2
ifdef::manual[see also : <<FatalOnRuntimeError>>]

`LogError` <string> or `LogError` = <const string>
ifdef::manual[see also : <<LogError>>]

`LogWarning` <string> or `LogWarning` = <const string>
ifdef::manual[see also : <<LogWarning>>]

`isFatalError` [W/L]
ifdef::manual[see also : <<isFatalError>>]

`isFatalError` <string>  //since 4.11.3.2 [W/L]
ifdef::manual[see also : <<isFatalError>>]

`markErrorNumber`
ifdef::manual[see also : <<markErrorNumber>>]

`errorsOccurredSinceMark` <relation> <integer> : boolean
ifdef::manual[see also : <<errorsOccurredSinceMark>>]

[source,winst]
----
markErrorNumber
comment "log error and thereby increase the error counter"
if errorsOccurredSinceMark > 0
	comment "There was an error ..."
endif
----

`getLastExitCode : string (exitcode)` [W/L]
ifdef::manual[see also : <<getLastExitCode>>]

`shellCall (`<command string>`) : string (exitcode)` //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<shellCall_str>>]

`processCall(`<string>`) : string (exitcode)` //since 4.11.6.1 [W/L]
ifdef::manual[see also : <<processCall>>]

`getLastServiceErrorClass`  : string
ifdef::manual[see also : <<getLastServiceErrorClass>>]

`getLastServiceErrorMessage`  : string
ifdef::manual[see also : <<getLastServiceErrorMessage>>]

[[opsi-winst-rc-localfunc_library]]
=== Defined Functions and Libraries [W/L]

since 4.12.0.0

*Definition*
----
DefFunc <func name>([calltype parameter type][,[calltype parameter type]]) : type
<function body>
endfunc
----

Where:


* `DefFunc` is the keyword used to start defining a local function..

* '<func name>' is the freely choosen name of the function.

* 'calltype' is the call type of the parameter [`val` | `ref`]. `val`='Call by Value', `ref`='Call by Reference'. Default: `val`

* 'parameter' is the free selected name of the call parameter which is available as a local variable within the function under the aforementioned name.

* 'type' is the type of data of the parameter concretely the function wether `string` or `stringlist`;

* '<function body>': is the body of the function which opsi-script syntax must suffice.

* `endfunc` is the keyword used to end defining a local function..


ifdef::manual[see also : <<opsi-winst-commands-localfunctions>>]

`importLib` <string expr>  ; import library // since 4.12.0.0 +
<string expr> : <file name>[.<file extension>][`::`<function name>] +
If no '.<file extension>' is given `.opsiscript` is used as default. +
If no '::<function name>' is given, all function from the given file will be imported.

<file name> is: +

* A complete path to an existing file. [W/L]

* A existing file in `%ScriptPath%` [W/L]

* A file in `%opsiScriptHelperPath%\lib` [W] +
Is equivalent to: '%ProgramFiles32Dir%\opsi.org\opsiScriptHelper\lib'

* A existing file in `%ScriptPath%/../lib` [W/L]

* A existing file in `%WinstDir%\lib` [W]

The tests for the location of the <file name> are done in the order above. 'opsi-script' uses the first file it finds that has a matching name.


ifdef::manual[see also : <<opsi-winst-commands-libraryfunctions>>]

[[opsi-winst-rc-interaction]]
=== Interaction [W/L]

`Pause` <string> or `Pause` = <const string>
ifdef::manual[see also : <<Pause>>]

`Stop` <string> or `stop` = <const string>
ifdef::manual[see also : <<Stop>>]

`setActionProgress <string>` : noresult //since 4.11.3 [W/L]
ifdef::manual[see also : <<setActionProgress>>]

`Message` <string> or `Message` = <const string>
ifdef::manual[see also : <<Message>>]

`ShowMessageFile` <string>
ifdef::manual[see also : <<ShowMessageFile>>]

`ShowBitMap`  [<file name>] [<sub title>]
ifdef::manual[see also : <<ShowBitMap>>]
